"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTestDestinations = exports.getTestDestinationByAlias = void 0;
var fs_1 = require("fs");
var path_1 = require("path");
var util_1 = require("@sap-cloud-sdk/util");
var logger = util_1.createLogger({
    package: 'test-util',
    messageContext: 'test-destination-provider'
});
var SYSTEMS_FILE = 'systems.json';
var CREDENTIALS_FILE = 'credentials.json';
var formatSystemJson = "Format of systems.json is:\n{\n  systems:[\n  {\n    alias:     A unique identifier. Used for matching a system and credentials.\n    uri:       A unique resource identifier like \"http://mySystem.com\"\n    sapClient?: The sap client as string e.g. \"001\"\n  },...\n  ]\n}";
var formatCredentials = "Format of credentials.json is:\n{\n  credentials:[\n  {\n    alias:     A unique identifier. Used for matching a system and credentials.\n    username:  The username used for basic authentication.\n    password: The password used for basic autentication.\n  },...\n  ]\n}";
/**
 * Loads a destination matching the provided alias stored in `systems.json` and `credentials.json`.
 * By default, this function starts looking in the directory the test process has been started in (i.e. '.')
 * and traverses the file hierarchy upwards until it finds a systems.json and credentials.json file.
 * Alternatively, you can supply paths to the systems and the credentials file directly.
 *
 * Throws an error when no systems.json can be found, the alias does not match any of the available destinations,
 * the JSON is malformed or one of the supplied paths is invalid.
 * Does not throw an error when no credentials.json can be found, but will print a warning.
 *
 * @param alias - The alias identifying the destination
 * @param options - References to the `systems.json` and `credentials.json` files
 * @returns An array of destinations
 */
function getTestDestinationByAlias(alias, options) {
    var destinations = getTestDestinations(options);
    var matchingDestination = destinations.find(function (d) { return d.name === alias; });
    if (!matchingDestination) {
        throw new Error("Couldn't find destination that matches the provided name \"" + alias + "\".\n      The following destinations could be found: " + destinations
            .map(function (d) { return d.name; })
            .join(', '));
    }
    return matchingDestination;
}
exports.getTestDestinationByAlias = getTestDestinationByAlias;
/**
 * Loads all destinations stored in `systems.json` and `credentials.json` files.
 *
 * By default, this functions starts looking in the directory the test process has been started in (i.e. '.')
 * and traverses the file hierarchy upwards until it finds a systems.json and credentials.json file.
 * Alternatively, you can supply paths to the systems and the credentials file directly.
 *
 * Throws an error when no systems.json can be found, the JSON is malformed or one of the supplied paths is invalid.
 * Does not throw an error when no credentials.json can be found, but will print a warning.
 *
 * @param options - References to the `systems.json` and `credentials.json` files
 * @returns An array of destinations
 */
function getTestDestinations(options) {
    var systems = readSystemsOrFail(options);
    var credentials = readCredentialsOrFail(options);
    return toDestinations(mergeSystemsAndCredentials(systems, credentials));
}
exports.getTestDestinations = getTestDestinations;
function readSystemsOrFail(options) {
    if (options && options.systemsFilePath) {
        if (!fs_1.existsSync(options.systemsFilePath)) {
            throw new Error("The provided path (" + options.systemsFilePath + ") to the systems file is invalid!");
        }
        return readSystems(options.systemsFilePath).systems;
    }
    var foundPath = findFileSearchingUpwards(process.cwd(), SYSTEMS_FILE);
    if (!foundPath) {
        throw new Error("No " + SYSTEMS_FILE + " could be found when searching in directory " + process.cwd() + " and upwards and no paths have been provided directly. " + formatSystemJson);
    }
    return readSystems(path_1.join(foundPath, SYSTEMS_FILE)).systems;
}
function readCredentialsOrFail(options) {
    if (options && options.credentialsFilePath) {
        if (fs_1.existsSync(options.credentialsFilePath)) {
            return readCredentials(options.credentialsFilePath).credentials;
        }
        throw new Error("The provided path (" + options.credentialsFilePath + ") to the credentials file is invalid!");
    }
    var foundPath = findFileSearchingUpwards(process.cwd(), CREDENTIALS_FILE);
    if (foundPath && fs_1.existsSync(path_1.join(foundPath, CREDENTIALS_FILE))) {
        return readCredentials(path_1.join(foundPath, CREDENTIALS_FILE)).credentials;
    }
    logger.warn("No path to a " + CREDENTIALS_FILE + " provided and none found next to " + foundPath + path_1.sep + SYSTEMS_FILE + ". Proceeding without credentials.");
    return [];
}
function mergeSystemsAndCredentials(systems, credentials) {
    return systems.map(function (system) { return (__assign(__assign({}, system), credentials.find(function (cred) { return cred.alias === system.alias; }))); });
}
function toDestinations(systemsAndCredentials) {
    return systemsAndCredentials.map(function (sysAndCred) { return ({
        name: sysAndCred.alias,
        url: sysAndCred.uri,
        username: sysAndCred.username,
        password: sysAndCred.password,
        sapClient: sysAndCred.sapClient,
        isTestDestination: true
    }); });
}
function findFileSearchingUpwards(dir, fileName) {
    var files = fs_1.readdirSync(dir);
    // TODO: use util method to find proper project root instead of the overall root
    var rootPath = path_1.parse(process.cwd()).root;
    if (files.includes(fileName)) {
        return dir;
    }
    if (dir === rootPath) {
        return null;
    }
    var oneDirUp = path_1.resolve(dir, '..');
    return findFileSearchingUpwards(oneDirUp, fileName);
}
function readSystems(filePath) {
    var systemfile = readJson(filePath);
    if (!systemfile.systems || systemfile.systems.length === 0) {
        throw new Error("No systems provided in " + filePath + ".\n                     If you do not want to define systems just remove the file. " + formatSystemJson);
    }
    systemfile.systems.forEach(function (system) {
        if (!system.alias || !system.uri) {
            throw new Error("A system in " + filePath + " is not valid - Mandatory alias or url missing.\n                       Broken entry is: " + JSON.stringify(system) + ". " + formatSystemJson);
        }
    });
    return systemfile;
}
function readCredentials(filePath) {
    var credentialsFile = readJson(filePath);
    if (!credentialsFile.credentials ||
        credentialsFile.credentials.length === 0) {
        throw new Error("No credentials provided in " + filePath + ".\n                     If you do not want to define credentials just remove the file. " + formatCredentials);
    }
    credentialsFile.credentials.forEach(function (cred) {
        if (!cred.alias || !cred.username || !cred.password) {
            throw new Error("A credential in " + filePath + " is not valid - Mandatory alias, username or password missing.\n                       Broken entry is: " + JSON.stringify(cred) + ". " + formatCredentials);
        }
    });
    return credentialsFile;
}
function readJson(filePath) {
    var content;
    try {
        content = fs_1.readFileSync(filePath, 'utf8');
    }
    catch (error) {
        throw new Error("Failed to read file at path: " + filePath + ".\n      Original error: " + error.message);
    }
    try {
        return JSON.parse(content);
    }
    catch (error) {
        throw new Error("File read from path " + filePath + " is not valid JSON.\n      Original error: " + error.message);
    }
}
//# sourceMappingURL=test-destination-provider.js.map