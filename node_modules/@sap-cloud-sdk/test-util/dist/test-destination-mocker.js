"use strict";
/* Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved. */
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unmockAllTestDestinations = exports.mockAllTestDestinations = exports.unmockTestDestination = exports.setTestDestination = exports.mockTestDestination = void 0;
var test_destination_provider_1 = require("./test-destination-provider");
/**
 * Add a destination with the given name from the `systems.json` and `credentials.json` files to the `destinations` environment variable.
 *
 * Throws an error if a destination with the same name as the given test destination already exists.
 *
 * @param name - Name of the test destination to add to the `destinations` environment variable
 * @param options - References to the `systems.json` and `credentials.json` files
 */
function mockTestDestination(name, options) {
    var mockedDestination = test_destination_provider_1.getTestDestinationByAlias(name, options);
    setTestDestination(mockedDestination);
}
exports.mockTestDestination = mockTestDestination;
/**
 * Set a given destination in the `destinations` environment variable.
 *
 * Throws an error if a destination with the same name as the given test destination already exists.
 *
 * @param destination - Test destination to add to the `destinations` environment variable
 * @param options - References to the `systems.json` and `credentials.json` files
 */
function setTestDestination(destination) {
    var currentDestinations = getDestinationsFromEnv();
    var existingNames = new Set(currentDestinations.map(function (dest) {
        if (!dest.name) {
            throw Error('The destination name is undefined.');
        }
        return dest.name;
    }));
    if (!destination.name) {
        throw Error('The destination name is undefined.');
    }
    validateNameAvailable(destination.name, existingNames);
    destination.isTestDestination = true;
    setDestinationsInEnv(__spreadArrays(currentDestinations, [destination]));
}
exports.setTestDestination = setTestDestination;
/**
 * Removes a destination with the given name from the destinations environment variable. If the given destination name is not found calling this function has no effect.
 * This function should be called to invert the behavior of [[mockTestDestination]]() and [[setTestDestination]]().
 *
 * @param name - Name of the mocked destination to remove
 */
function unmockTestDestination(name) {
    var currentDestinations = getDestinationsFromEnv();
    var cleanedDestinations = currentDestinations.filter(function (destination) { return !(destination.isTestDestination && destination.name === name); });
    setDestinationsInEnv(cleanedDestinations);
}
exports.unmockTestDestination = unmockTestDestination;
/**
 * Add all destinations from the `systems.json` and `credentials.json` files to the `destinations` environment variable.
 *
 * Throws an error if a destination with the same name as the given test destinations already exists.
 *
 * @param options - References to the `systems.json` and `credentials.json` files
 */
function mockAllTestDestinations(options) {
    var testDestinations = test_destination_provider_1.getTestDestinations(options);
    var currentDestinations = getDestinationsFromEnv();
    var existingNames = new Set(currentDestinations.map(function (dest) {
        if (!dest.name) {
            throw Error('The destination name is undefined.');
        }
        return dest.name;
    }));
    testDestinations.forEach(function (dest) {
        if (!dest.name) {
            throw Error("At least one of the provided destinations is missing a the 'name' property!");
        }
        validateNameAvailable(dest.name, existingNames);
        currentDestinations.push(dest);
    });
    setDestinationsInEnv(currentDestinations);
}
exports.mockAllTestDestinations = mockAllTestDestinations;
/**
 * Removes all test destinations stored in `systems.json` and `credentials.json` files or added through [[setTestDestination]]() from the `destinations` environment variable.
 *
 * This function should be called to invert the behavior of [[mockAllTestDestinations]]() and other add single mocked destination functions.
 */
function unmockAllTestDestinations() {
    var currentDestinations = getDestinationsFromEnv();
    var cleanedDestinations = currentDestinations.filter(function (destination) { return !destination.isTestDestination; });
    setDestinationsInEnv(cleanedDestinations);
}
exports.unmockAllTestDestinations = unmockAllTestDestinations;
function validateNameAvailable(destinationName, existingNames) {
    if (existingNames.has(destinationName)) {
        throw new Error("Parsing mocked destinations failed, destination with name \"" + destinationName + "\" already exists in the \"destinations\" environment variables.");
    }
}
function setDestinationsInEnv(destinations) {
    process.env['destinations'] = JSON.stringify(destinations);
}
function getDestinationsFromEnv() {
    try {
        var envDestinations = process.env['destinations'] || '[]';
        return JSON.parse(envDestinations);
    }
    catch (error) {
        throw new Error("Destinations environment variable cannot be read: " + error.message);
    }
}
//# sourceMappingURL=test-destination-mocker.js.map