"use strict";
/*!
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const Listr = require("listr");
const path = require("path");
const utils_1 = require("../utils/");
class AddCxServer extends command_1.Command {
    async run() {
        const { flags, args } = this.parse(AddCxServer);
        const projectDir = args.projectDir || '.';
        const options = await this.getOptions();
        try {
            const files = [this.copyDescriptorForGithub('cx-server', projectDir), this.copyDescriptorForGithub('server.cfg', projectDir)];
            if (flags.platform === 'win32') {
                files.push(this.copyDescriptorForGithub('cx-server.bat', projectDir));
            }
            const tasks = new Listr([
                {
                    title: 'Finding potential conflicts',
                    task: async () => utils_1.findConflicts(files, flags.force).catch(e => this.error(e, { exit: 11 }))
                },
                {
                    title: 'Creating files',
                    task: async () => utils_1.copyFiles(files, options)
                }
            ]);
            await tasks.run();
        }
        catch (error) {
            this.error(error, { exit: 1 });
        }
    }
    copyDescriptorForGithub(fileName, projectDir) {
        const githubPrefix = 'https://raw.githubusercontent.com/SAP/devops-docker-cx-server/master/cx-server-companion/life-cycle-scripts/';
        return {
            sourcePath: new URL(fileName, githubPrefix),
            fileName: path.resolve(projectDir, 'cx-server', fileName)
        };
    }
    async getOptions() {
        return {};
    }
}
exports.default = AddCxServer;
AddCxServer.description = 'Add the scripts to set up a Jenkins master for CI/CD of your project';
AddCxServer.examples = ['$ sap-cloud-sdk add-cx-server'];
AddCxServer.flags = {
    force: command_1.flags.boolean({
        description: 'Do not fail if a file already exist and overwrite it.'
    }),
    platform: command_1.flags.string({
        hidden: true,
        default: process.platform,
        description: 'The currently running OS.'
    }),
    help: command_1.flags.help({
        char: 'h',
        description: 'Show help for the add-cx-server command.'
    })
};
AddCxServer.args = [
    {
        name: 'projectDir',
        description: 'Path to the project directory to which the cx-server should be added.'
    }
];
