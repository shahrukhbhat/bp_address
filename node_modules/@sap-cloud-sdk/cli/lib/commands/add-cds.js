"use strict";
/*!
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const cli_ux_1 = require("cli-ux");
const Listr = require("listr");
const utils_1 = require("../utils");
const utils_2 = require("../utils/");
class AddCds extends command_1.Command {
    async run() {
        const { flags, args } = this.parse(AddCds);
        const projectDir = args.projectDir || '.';
        try {
            const options = await this.getOptions();
            const tasks = new Listr([
                {
                    title: 'Creating files',
                    task: async () => {
                        const copyDescriptors = utils_2.getCopyDescriptors(projectDir, utils_2.getTemplatePaths(['add-cds']));
                        await utils_2.findConflicts(copyDescriptors, flags.force).catch(e => this.error(flags.verbose ? e.stack : e.message, { exit: 11 }));
                        await utils_2.copyFiles(copyDescriptors, options);
                    }
                },
                {
                    title: 'Adding dependencies to package.json',
                    task: async () => utils_1.modifyPackageJson({ projectDir, force: flags.force, addCds: true }).catch(e => this.error(flags.verbose ? e.stack : e.message, { exit: 12 }))
                },
                {
                    title: 'Installing dependencies',
                    task: async () => utils_1.installDependencies(projectDir, flags.verbose).catch(e => this.error(flags.verbose ? e.stack : e.message, { exit: 13 })),
                    enabled: () => !flags.skipInstall
                },
                {
                    title: 'Modifying `.gitignore`',
                    task: () => utils_1.modifyGitIgnore(projectDir, true)
                }
            ]);
            await tasks.run();
            this.printSuccessMessage();
        }
        catch (e) {
            this.error(flags.verbose ? e.stack : e.message, { exit: 1 });
        }
    }
    async getOptions() {
        const projectName = utils_2.getProjectNameFromManifest(this);
        const options = {
            projectName: projectName || (await cli_ux_1.default.prompt('Enter project name as maintained in Cloud Foundry'))
        };
        return options;
    }
    printSuccessMessage() {
        this.log([
            'âœ… Successfully added a cds service to your project.',
            '',
            'Generated service needs to be exposed.',
            'For express apps you can do this by adding the following snippet to your code:',
            'cds',
            '  .connect()',
            "  .serve('CatalogService')",
            '  .in(<your-express-app>)',
            '',
            'For other frameworks please refer to the documentation.'
        ].join('\n'));
    }
}
exports.default = AddCds;
AddCds.description = 'Setup your Cloud Foundry app to use a CDS service';
AddCds.examples = ['$ sap-cloud-sdk add-cds'];
AddCds.flags = {
    // visible
    force: command_1.flags.boolean({
        description: 'Do not fail if a file or npm script already exist and overwrite it.'
    }),
    help: command_1.flags.help({
        char: 'h',
        description: 'Show help for the add-cds command.'
    }),
    verbose: command_1.flags.boolean({
        char: 'v',
        description: 'Show more detailed output.'
    }),
    // hidden
    projectName: command_1.flags.string({
        hidden: true,
        description: 'Give project name which is used for the Cloud Foundry mainfest.yml.'
    }),
    skipInstall: command_1.flags.boolean({
        hidden: true,
        description: 'Skip installing npm dependencies. If you use this, make sure to install manually afterwards.'
    })
};
AddCds.args = [
    {
        name: 'projectDir',
        description: 'Path to the project directory in which the cds sources should be added.'
    }
];
