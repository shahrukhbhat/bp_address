"use strict";
/*!
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const cli_ux_1 = require("cli-ux");
const fs = require("fs");
const Listr = require("listr");
const path = require("path");
const utils_1 = require("../utils");
const utils_2 = require("../utils/");
class Init extends command_1.Command {
    async run() {
        const { flags, args } = this.parse(Init);
        const projectDir = args.projectDir || '.';
        try {
            fs.mkdirSync(projectDir, { recursive: true });
            const isScaffold = await utils_2.shouldBuildScaffold(projectDir, flags.buildScaffold, flags.force);
            if (isScaffold) {
                await utils_2.buildScaffold(projectDir, flags.verbose, flags.addCds);
            }
            const options = await this.getOptions(projectDir, isScaffold ? 'npm run start:prod' : flags.startCommand, flags.projectName).catch(e => this.error(flags.verbose ? e.stack : e.message, { exit: 10 }));
            await utils_2.usageAnalytics(projectDir, flags.analytics, flags.analyticsSalt);
            const tasks = new Listr([
                {
                    title: 'Creating files',
                    task: async () => {
                        const copyDescriptors = utils_2.getCopyDescriptors(projectDir, utils_2.getTemplatePaths(this.getTemplateNames(isScaffold, flags.addCds)));
                        await utils_2.findConflicts(copyDescriptors, flags.force).catch(e => this.error(flags.verbose ? e.stack : e.message, { exit: 11 }));
                        await utils_2.copyFiles(copyDescriptors, options);
                    }
                },
                {
                    title: 'Modifying test config',
                    task: () => utils_2.modifyJestConfig(path.resolve(projectDir, 'test', 'jest-e2e.json'), utils_2.getJestConfig(false)),
                    enabled: () => isScaffold
                },
                {
                    title: 'Adding dependencies to package.json',
                    task: async () => utils_2.modifyPackageJson({ projectDir, isScaffold, frontendScripts: flags.frontendScripts, force: flags.force, addCds: flags.addCds }).catch(e => this.error(flags.verbose ? e.stack : e.message, { exit: 12 }))
                },
                {
                    title: 'Installing dependencies',
                    task: async () => utils_2.installDependencies(projectDir, flags.verbose).catch(e => this.error(flags.verbose ? e.stack : e.message, { exit: 13 })),
                    enabled: () => !flags.skipInstall
                },
                {
                    title: 'Modifying `.gitignore`',
                    task: () => utils_2.modifyGitIgnore(projectDir, flags.addCds)
                }
            ]);
            await tasks.run();
            this.printSuccessMessage(isScaffold, flags.addCds);
        }
        catch (error) {
            this.error(flags.verbose ? error.stack : error.message, { exit: 1 });
        }
    }
    getTemplateNames(isScaffold, addCds) {
        const templates = ['init'];
        if (addCds) {
            templates.push('add-cds');
            if (isScaffold) {
                templates.push('add-cds-scaffold');
            }
        }
        if (isScaffold) {
            templates.push('scaffold-readme');
        }
        return templates;
    }
    async getOptions(projectDir, startCommand, projectName) {
        const { name, scripts } = await utils_2.parsePackageJson(projectDir);
        const options = {
            projectName: projectName ||
                (await cli_ux_1.default.prompt('Enter project name (for use in manifest.yml)', {
                    default: name
                })),
            command: startCommand ||
                (await cli_ux_1.default.prompt('Enter the command to start your application', {
                    default: scripts.start ? 'npm start' : ''
                }))
        };
        return options;
    }
    printSuccessMessage(isScaffold, addCds) {
        const warnings = utils_1.getWarnings();
        const body = [
            'üöÄ Next steps:',
            ...this.getNextSteps(isScaffold, addCds),
            '',
            'üî® Consider setting up Jenkins to continuously build your app.',
            'Use `sap-cloud-sdk add-cx-server` to create the setup script.'
        ];
        if (warnings) {
            this.log(utils_1.boxMessage(['‚ö†Ô∏è  Init finished with warnings:', ...warnings, '', ...body]));
        }
        else {
            this.log(utils_1.boxMessage(['‚úÖ Init finished successfully.', '', ...body]));
        }
    }
    getNextSteps(isScaffold, addCds) {
        const message = [];
        if (addCds) {
            message.push('- Deploy your database locally (`npm run cds-deploy`)');
        }
        if (isScaffold) {
            message.push(...this.nextStepsScaffold());
        }
        else {
            if (addCds) {
                message.push(...this.nextStepsCdsNoScaffold());
            }
            message.push(...this.nextStepsNoScaffold());
        }
        return message;
    }
    nextStepsNoScaffold() {
        return [
            '- Make sure that your app listens to `process.env.PORT`',
            '- Build your app if necessary',
            '- Run `sap-cloud-sdk package [--include INC][--exclude EXC]`',
            '- Push to Cloud Foundry (`cf push`)'
        ];
    }
    nextStepsScaffold() {
        return ['- Run the application locally (`npm run start:dev`)', '- Deploy your application (`npm run deploy`)'];
    }
    nextStepsCdsNoScaffold() {
        return [
            'Expose your service:',
            'For express apps add the following snippet to your code:',
            '',
            'cds',
            '  .connect()',
            "  .serve('CatalogService')",
            '  .in(<your-express-app>);',
            '',
            'For other frameworks please refer to the documentation.'
        ];
    }
}
exports.default = Init;
Init.description = 'Initializes your project for the SAP Cloud SDK, SAP Cloud Platform Cloud Foundry and CI/CD using the SAP Cloud SDK toolkit';
Init.examples = ['$ sap-cloud-sdk init', '$ sap-cloud-sdk init --help'];
Init.flags = {
    // visible
    projectDir: command_1.flags.string({
        description: 'Path to the directory in which the project should be created.'
    }),
    addCds: command_1.flags.boolean({
        description: 'Add a cds configuration and example data to follow the SAP Cloud Application Programming model.'
    }),
    force: command_1.flags.boolean({
        description: 'Do not fail if a file or npm script already exist and overwrite it.'
    }),
    frontendScripts: command_1.flags.boolean({
        description: 'Add frontend-related npm scripts which are executed by our CI/CD toolkit.'
    }),
    help: command_1.flags.help({
        char: 'h',
        description: 'Show help for the init command.'
    }),
    verbose: command_1.flags.boolean({
        char: 'v',
        description: 'Show more detailed output.'
    }),
    // hidden
    projectName: command_1.flags.string({
        hidden: true,
        description: 'Give project name which is used for the Cloud Foundry mainfest.yml.'
    }),
    startCommand: command_1.flags.string({
        hidden: true,
        description: 'Give a command which is used to start the application productively.'
    }),
    buildScaffold: command_1.flags.boolean({
        hidden: true,
        description: 'If the folder is empty, use nest-cli to create a project scaffold.'
    }),
    analytics: command_1.flags.boolean({
        hidden: true,
        allowNo: true,
        description: 'Enable or disable collection of anonymous usage data.'
    }),
    analyticsSalt: command_1.flags.string({
        hidden: true,
        description: 'Set salt for analytics. This should only be used for CI builds.'
    }),
    skipInstall: command_1.flags.boolean({
        hidden: true,
        description: 'Skip installing npm dependencies. If you use this, make sure to install manually afterwards.'
    })
};
Init.args = [
    {
        name: 'projectDir',
        description: 'Path to the directory in which the project should be created.'
    }
];
