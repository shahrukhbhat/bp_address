"use strict";
/*!
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const glob = require("fast-glob");
const fs = require("fs");
const Listr = require("listr");
const path = require("path");
const rm = require("rimraf");
const utils_1 = require("../utils");
class Package extends command_1.Command {
    async run() {
        const { flags, args } = this.parse(Package);
        const projectDir = args.projectDir || '.';
        const outputDir = path.resolve(projectDir, flags.output);
        function copyFiles(filePaths) {
            filePaths.forEach(filepath => {
                const outputFilePath = path.resolve(outputDir, path.relative(projectDir, filepath));
                fs.mkdirSync(path.dirname(outputFilePath), { recursive: true });
                fs.copyFileSync(filepath, outputFilePath);
            });
        }
        const tasks = new Listr([
            {
                title: `Overwrite ${flags.output}`,
                task: () => {
                    try {
                        if (fs.existsSync(outputDir)) {
                            rm.sync(outputDir);
                        }
                        fs.mkdirSync(outputDir);
                    }
                    catch (error) {
                        this.error(error, { exit: 1 });
                    }
                }
            },
            {
                title: 'Copying files',
                task: async () => {
                    const include = await glob(flags.include.split(','), {
                        dot: true,
                        absolute: true,
                        cwd: projectDir
                    });
                    const exclude = flags.exclude.length
                        ? await glob(flags.exclude.split(','), {
                            dot: true,
                            absolute: true,
                            cwd: projectDir
                        })
                        : [];
                    const filtered = include.filter(filepath => !exclude.includes(filepath));
                    copyFiles(filtered);
                }
            },
            {
                title: 'Copying node_modules for ci',
                enabled: () => flags.ci,
                task: async () => {
                    const nodeModuleFiles = await glob('node_modules/**/*', {
                        dot: true,
                        absolute: true,
                        cwd: projectDir
                    });
                    copyFiles(nodeModuleFiles);
                }
            },
            {
                title: 'Check the SAP Cloud SDK dependencies',
                task: async () => {
                    const { dependencies, devDependencies } = await utils_1.parsePackageJson(projectDir);
                    utils_1.checkOldDependencies(dependencies);
                    utils_1.checkOldDependencies(devDependencies);
                }
            }
        ]);
        await tasks.run();
        this.printSuccessMessage();
    }
    printSuccessMessage() {
        const warnings = utils_1.getWarnings();
        const body = [
            '🚀 Please migrate to new packages.',
            'Please find how to migrate here:',
            'https://github.com/SAP/cloud-sdk/blob/master/knowledge-base/how-to-switch-to-os-cloud-sdk.md'
        ];
        if (warnings) {
            if (this.hasOldSDKWarnings(warnings)) {
                this.log(utils_1.boxMessage(['⚠️ Package finished with warnings:', ...warnings, '', ...body]));
            }
            else {
                this.log(utils_1.boxMessage(['⚠️ Package finished with warnings:', ...warnings]));
            }
        }
        else {
            this.log(utils_1.boxMessage(['✅ Package finished successfully.']));
        }
    }
    hasOldSDKWarnings(warnings) {
        const regex = RegExp('Old SAP Cloud SDK: .* is detected.');
        return warnings.map(warning => regex.test(warning)).filter(value => value).length > 0;
    }
}
exports.default = Package;
Package.description = 'Copies the specified files to the deployment folder';
Package.examples = [
    '$ sap-cloud-sdk package',
    '$ sap-cloud-sdk package -i="index.html"',
    '$ sap-cloud-sdk package --include="package.json,package-lock.json,index.js,dist/**/*" --exclude="**/*.java"'
];
Package.flags = {
    help: command_1.flags.help({
        char: 'h',
        description: 'Show help for the package command.'
    }),
    output: command_1.flags.string({
        char: 'o',
        default: 'deployment',
        description: 'Output and deployment folder'
    }),
    ci: command_1.flags.boolean({
        default: false,
        description: 'Add node_modules in production environments to respect the `build once` principle.'
    }),
    include: command_1.flags.string({
        char: 'i',
        default: 'package.json,package-lock.json,index.js,dist/**/*',
        description: 'Comma seperated list of files or globs to include'
    }),
    exclude: command_1.flags.string({
        char: 'e',
        default: '',
        description: 'Comma separated list of files or globs to exclude'
    }),
    verbose: command_1.flags.boolean({
        char: 'v',
        description: 'Show more detailed output.'
    })
};
Package.args = [
    {
        name: 'projectDir',
        description: 'Path to the project directory that shall be packaged.'
    }
];
