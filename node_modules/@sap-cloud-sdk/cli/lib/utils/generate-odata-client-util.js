"use strict";
/*!
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.toStringFlag = exports.toBooleanFlag = exports.generatorOptionCli = void 0;
const command_1 = require("@oclif/command");
const path = require("path");
exports.generatorOptionCli = {
    projectDir: {
        default: '.',
        describe: 'Path to the folder in which the VDM should be created. The input and output dir are relative to this directory.',
        type: 'string'
    }
};
function toBooleanFlag(yargsBool) {
    const extendedDescription = `${yargsBool.describe} [default: ${yargsBool.default}].`;
    return command_1.flags.boolean({
        char: yargsBool.alias,
        description: extendedDescription,
        required: yargsBool.requiresArg,
        default: yargsBool.default,
        allowNo: yargsBool.default
    });
}
exports.toBooleanFlag = toBooleanFlag;
function toStringFlag(yargsString) {
    var _a;
    const options = {
        char: yargsString.alias,
        description: yargsString.describe,
        required: yargsString.requiresArg,
        default: yargsString.default
    };
    if (((_a = yargsString === null || yargsString === void 0 ? void 0 : yargsString.coerce) === null || _a === void 0 ? void 0 : _a.name) === 'resolve') {
        options.parse = (input, context) => {
            let projectDir = '.';
            if (context.argv.includes('--projectDir')) {
                projectDir = context.argv[context.argv.indexOf('--projectDir') + 1];
            }
            return path.resolve(projectDir, input);
        };
    }
    return command_1.flags.string(options);
}
exports.toStringFlag = toStringFlag;
