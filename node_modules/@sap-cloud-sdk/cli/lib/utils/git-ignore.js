"use strict";
/*!
 * Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.modifyGitIgnore = void 0;
const fs = require("fs");
const path = require("path");
const utils_1 = require("../utils/");
function modifyGitIgnore(projectDir, addCds) {
    const pathToGitignore = path.resolve(projectDir, '.gitignore');
    const pathsToIgnore = ['credentials.json', '/s4hana_pipeline', '/deployment'];
    if (addCds) {
        const cdsPathsToIgnore = ['_out', '.cds_gen.log', '*.db', 'connection.properties', 'default-*.json', 'gen/', 'target/'];
        pathsToIgnore.push(...cdsPathsToIgnore);
    }
    if (fs.existsSync(pathToGitignore)) {
        try {
            const fileContent = fs.readFileSync(pathToGitignore, 'utf8');
            const newPaths = pathsToIgnore.filter(path => !fileContent.includes(path));
            const newFileContent = fileContent + (newPaths.length ? `\n${newPaths.join('\n')}\n` : '');
            fs.writeFileSync(pathToGitignore, newFileContent, 'utf8');
        }
        catch (error) {
            utils_1.recordWarning('There was a problem writing to the .gitignore.', 'If your project is using a different version control system,', 'please make sure the following paths are not tracked:', ...pathsToIgnore.map(path => '  ' + path));
        }
    }
    else {
        utils_1.recordWarning('No .gitignore file found!', 'If your project is using a different version control system,', 'please make sure the following paths are not tracked:', ...pathsToIgnore.map(path => '  ' + path));
    }
}
exports.modifyGitIgnore = modifyGitIgnore;
