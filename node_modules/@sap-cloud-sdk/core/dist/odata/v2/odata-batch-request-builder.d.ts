import { MapType } from '@sap-cloud-sdk/util';
import { Destination, DestinationNameAndJwt, DestinationOptions } from '../../scp-cf';
import { Constructable, BatchResponse } from '../common';
import { MethodRequestBuilderBase } from '../common/request-builder/request-builder-base';
import { ODataBatchRequestConfig } from '../common/request/odata-batch-request-config';
import { EntityV2 } from './entity';
import { ODataBatchChangeSetV2 } from './odata-batch-change-set';
import { CreateRequestBuilderV2, DeleteRequestBuilderV2, GetAllRequestBuilderV2, GetByKeyRequestBuilderV2, UpdateRequestBuilderV2 } from './request-builder';
/**
 * The OData batch request builder to build a batch, which consists of an ordered retrieve requests or change sets.
 *
 */
export declare class ODataBatchRequestBuilderV2 extends MethodRequestBuilderBase<ODataBatchRequestConfig> {
    readonly defaultServicePath: string;
    readonly requests: (ODataBatchChangeSetV2<CreateRequestBuilderV2<EntityV2> | UpdateRequestBuilderV2<EntityV2> | DeleteRequestBuilderV2<EntityV2>> | GetAllRequestBuilderV2<EntityV2> | GetByKeyRequestBuilderV2<EntityV2>)[];
    readonly entityToConstructorMap: MapType<Constructable<EntityV2>>;
    /**
     * Creates an instance of ODataBatchRequestBuilder.
     *
     * @param defaultServicePath - Service path
     * @param requests - An array of retrieve requests or change sets
     * @param entityToConstructorMap - A map that holds the entity type to constructor mapping
     */
    constructor(defaultServicePath: string, requests: (ODataBatchChangeSetV2<CreateRequestBuilderV2<EntityV2> | UpdateRequestBuilderV2<EntityV2> | DeleteRequestBuilderV2<EntityV2>> | GetAllRequestBuilderV2<EntityV2> | GetByKeyRequestBuilderV2<EntityV2>)[], entityToConstructorMap: MapType<Constructable<EntityV2>>);
    /**
     * Execute the given request and return the according promise. Please notice: The sub-requests may fail even the main request is successful.
     *
     * @param destination - Targeted destination on which the request is performed.
     * @param options - Options to employ when fetching destinations.
     * @returns Promise resolving to the requested data.
     */
    execute(destination: Destination | DestinationNameAndJwt, options?: DestinationOptions): Promise<BatchResponse[]>;
    private detectLineBreak;
}
export { ODataBatchRequestBuilderV2 as ODataBatchRequestBuilder };
//# sourceMappingURL=odata-batch-request-builder.d.ts.map